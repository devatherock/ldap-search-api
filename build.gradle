plugins {
    id 'groovy'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'io.micronaut.application' version '3.7.10'
    id 'jacoco'
    id 'org.sonarqube' version '5.0.0.4638'
    id 'com.github.kt3k.coveralls' version '2.12.2'
    id 'com.diffplug.spotless' version '6.25.0'
}

version = '2.0.0'
group = 'io.github.devatherock'

repositories {
    mavenCentral()
}

micronaut {
    runtime('netty')
    processing {
        incremental(true)
        annotations('io.github.devatherock.ldapsearch.*')
    }
}

dependencies {
    def lombokVersion = '1.18.32'

    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    annotationProcessor("io.micronaut.openapi:micronaut-openapi")

    compileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    compileOnly group: 'com.google.code.findbugs', name: 'annotations', version: '3.0.1'
    compileOnly("org.graalvm.nativeimage:svm")

    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.swagger.core.v3:swagger-annotations")
    implementation("io.micronaut:micronaut-management")
    implementation("io.micronaut.micrometer:micronaut-micrometer-core")

    implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '7.4'
    implementation group: 'org.codehaus.janino', name: 'janino', version: '3.1.12'
    implementation group: 'javax.inject', name: 'javax.inject', version: '1'
    implementation "ch.qos.logback:logback-classic:1.5.6"

    testImplementation group: 'org.spockframework', name: 'spock-core', version: '2.3-groovy-3.0'
    testImplementation group: 'net.bytebuddy', name: 'byte-buddy', version: '1.14.16'
    testImplementation group: 'org.objenesis', name: 'objenesis', version: '3.4'
    testImplementation group: 'io.micronaut.test', name: 'micronaut-test-spock'
    testImplementation group: 'com.unboundid', name: 'unboundid-ldapsdk', version: '7.0.0'
    testImplementation group: 'io.micronaut', name: 'micronaut-http-client'
    testImplementation group: 'ch.qos.logback', name: 'logback-classic'
    testImplementation group: 'org.codehaus.groovy', name: 'groovy-json', version: '3.0.21'
}

application {
    mainClass.set("io.github.devatherock.ldapsearch.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("1.8")
    targetCompatibility = JavaVersion.toVersion("1.8")
}

test {
    doFirst {
        if (Boolean.getBoolean('graalvm')) {
            jvmArgs("-agentlib:native-image-agent=access-filter-file=$projectDir/src/main/resources/graal/access-filter.json,config-output-dir=$projectDir/build/graal")
        }
    }
}

// Generates resource-config.json file for graalvm
build.dependsOn(generateResourcesConfigFile)

tasks.withType(Test) {
    useJUnitPlatform()
}

run {
    systemProperties(System.properties)
}

ext.jacoco = [
    exclusions: [
        'io/github/devatherock/ldapsearch/Application.class',
    ],
    coverageThresholds: [
        'io.github.devatherock.logback.LogbackConfigInitializer': [
            'BRANCH': 0.75,
            'COMPLEXITY': 0.62,
            'INSTRUCTION': 0.89,
            'LINE': 0.88
        ],
    ]
]

apply from: "${getPropertyValue('gradle.includes.location', 'https://raw.githubusercontent.com/devatherock/gradle-includes/master')}/integration.gradle"
apply from: "${getPropertyValue('gradle.includes.location', 'https://raw.githubusercontent.com/devatherock/gradle-includes/master')}/checks.gradle"

/**
 * Fetches the value of a gradle property
 *
 * @param propertyName
 * @param propertyValueDefault
 * @return the property value
 */
String getPropertyValue(String propertyName, String propertyValueDefault = null) {
    return project.hasProperty(propertyName) ? project[propertyName] : propertyValueDefault
}